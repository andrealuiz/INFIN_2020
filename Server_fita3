#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include <fcntl.h>                                                        
#include <termios.h>       
#include <sys/ioctl.h>  


#define BAUDRATE B9600                                                
//#define MODEMDEVICE "/dev/ttyS0"        //Conexió IGEP - Arduino
#define MODEMDEVICE "/dev/ttyACM1"         //Conexió directa PC(Linux) - Arduino                                   
#define _POSIX_SOURCE 1 					/* POSIX compliant source */       
#define TAMMUES 10          
 
 // prototip funcions
 
int	ConfigurarSerie(void);
void Enviar(int fd,char *missatge);
void Rebre(int fd,char *buf);
void TancarSerie(int fd);                                                           
struct termios oldtio,newtio; 

                         
                                          
                                                                                 
int main(int argc, char **argv)                                                               
{   
	
	/*Declarem variables*/
	
	char buf[255];
	char missatge[255];                                                                                                                              
	float		mayor=00.00;
	float 		menor=119.99;
	float 		mitjana= 00.00;
	float 		resmitjana;
	float		muestras [TAMMUES] = {};
	int			mogua = 0; 
	int 		temps;
    int 		v, y, x, fd; 
    float 		prova = 00.00;
	int 		most_mitjana; 
	char		tempbin [5];                                                         
	float 		buf2;
	
	/*Variables que utilitzem per reescalar la temperatura i convertir-la a graus*/
	 
	long in_min = 0000;
	long in_max =1023; 
	long out_min = 00000; 
	long out_max = 12000;
	float map;
	float tempgraus ;
	
	
	fd = ConfigurarSerie();        //Obrim el port sèrie
	
	
	/*S'introdueixen els paràmetres per pantalla per la comanda de la operació M*/
	
	printf("Posar en Marxa el mostreig (1), Parar mostreig (0):\n");
	scanf("%i", &v);
	printf("temps a entrar (entre 1 i 20):\n");
	scanf("%i", &temps);
	printf("número de mostres per fer la mitjana (entre 1 i 9):\n");
	scanf("%i", &most_mitjana);
	
	
	/*Enviem el missatge 1*/
	
	memset(missatge,'\0', 255);			//Reset dels arrays missatge i buf
	memset(buf,'\0', 255);
	sprintf(missatge,"AM%i%02iZ", v, temps);
	Enviar(fd,missatge);
	Rebre(fd,buf);
	
	printf ("%s\n", buf);
	
	memset(muestras,'\0', TAMMUES);
	
	/*S'envia la comanda ACZ i rebem les temperatures en bucle*/

	for (y = 0;;y++){  			
		
		memset(missatge,'\0', 255);
		memset(buf,'\0', 255);
		sprintf(missatge,"ACZ");
		sleep (temps*2);
		Enviar(fd,missatge);
		Rebre(fd,buf);

		sprintf(tempbin,"%c%c%c%c",buf[3],buf[4],buf[5],buf[6]); 		//Guardem les posicions de l'array qque continguin la temperatura a la variable tempbin
		tempbin [4] = 0;
	
		
		
	/*Es fa la conversió, primer de l'array a integer, i després a graus*/
	
		buf2= atoi(tempbin);
		map = (buf2 - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
		tempgraus = map/100;
		printf ("Ultima temperatura es %02.2fºC\n\n",tempgraus);
		
		
	/*Creem l'array circular*. Quan muestras[y] estigui ple de valors de temperatures, és a dir quan s'hagin fet 100 lectures, 
	 * les noves lectures s'aniran afegint al principi de l'array de muestras, fins repetir la condició (y== TAMMUES)*/
			
		if (y >= TAMMUES){  
			
			y=0;
		} 
											
		muestras[y] = tempgraus;
			
			/*printf ("%02.2f\n",muestras[0]);
			printf ("%02.2f\n",muestras[1]);
			printf ("%02.2f\n",muestras[2]);
			printf ("%02.2f\n",muestras[3]);
			printf ("%02.2f\n",muestras[4]);
			printf ("%02.2f\n",muestras[5]);
			printf ("%02.2f\n",muestras[6]);
			printf ("%02.2f\n",muestras[7]);
			printf ("%02.2f\n",muestras[8]);
			printf ("%02.2f\n",muestras[9]);*/
		
		
		
	/*Fem la mitjana de les mostres especificada a la primera comanda (most_mitjana)*/			
		
	for (int l=0; l<= most_mitjana -1; l++){
		
		y = y-l;
		
		if (y < 0){
			
			x = TAMMUES+y;
			prova = muestras[x];
			
		} else {
			
			prova = muestras[y];
				
		}
		
		mitjana = mitjana + prova;
		y=y+l;
		//printf("prova es:%.2f \n",mitjana);
		}
		
		resmitjana = mitjana / most_mitjana;
			
		
	/*Creem dos comparadors de màxim i mínim històric. 
	* Si la nova lectura és major o menor que la guardada a la variable "mayor" i "menor", respectivament, s'actualitza el seu valor*/
		
		if (muestras[y]> mayor){ 	
									
			mayor=muestras[y];
		} 
								
		if (muestras[y]< menor){ 
										
			menor=muestras[y];
			
		} 
		
		mogua ++;			//Comptador per lectures realitzades
		
		
		printf("-----------------------Informació sobre les lectures--------------------\n\n");
		printf("La temperatura minima es: %2.2fºC \n",menor);
		printf("La temperatura maxima es: %2.2fºC\n",mayor);
		printf("El numero de mostres realitzades es: %i \n",mogua);
		printf("La mitjana de les %i ultimes mostres es: %02.2fºC\n\n\n",most_mitjana, resmitjana);
		
		mitjana=0;
		
	/*Enviem la comanda "AS131Z"* o "AS130Z" per fer pampallugues amb el LED 13 amb cada lectura realitzada*/
		
		if (mogua%2 != 0){
			
			memset(missatge,'\0', 255);
			memset(buf,'\0', 255);
			sprintf(missatge,"AS131Z");
			sleep (1);
			Enviar(fd,missatge);
			Rebre(fd,buf);
			
		}else{
			
			memset(missatge,'\0', 255);
			memset(buf,'\0', 255);
			sprintf(missatge,"AS130Z");
			sleep (1);
			Enviar(fd,missatge);
			Rebre(fd,buf);
			
		}
				
		
	}
	
	

}


int	ConfigurarSerie(void)
{
	int fd;
	fd = open(MODEMDEVICE, O_RDWR | O_NOCTTY );
	if (fd <0) {perror(MODEMDEVICE); exit(-1); }

	tcgetattr(fd,&oldtio); /* save current port settings */

	bzero(&newtio, sizeof(newtio));
	//newtio.c_cflag = BAUDRATE | CRTSCTS | CS8 | CLOCAL | CREAD;
	newtio.c_cflag = BAUDRATE | CS8 | CLOCAL | CREAD;
	newtio.c_iflag = IGNPAR;
	newtio.c_oflag = 0;

	/* set input mode (non-canonical, no echo,...) */
	newtio.c_lflag = 0;

	newtio.c_cc[VTIME]    = 0;   /* inter-character timer unused */
	newtio.c_cc[VMIN]     = 1;   /* blocking read until 1 chars received */

	tcflush(fd, TCIFLUSH);
	tcsetattr(fd,TCSANOW,&newtio);

	sleep(2); //Per donar temps a que l'Arduino es recuperi del RESET
	return fd;
}              

void TancarSerie(int fd)
{
	tcsetattr(fd,TCSANOW,&oldtio);
	close(fd);
}
void Enviar(int fd,char *missatge)
{
	int res=0;
	
	res = write(fd,missatge,strlen(missatge));
	
	if (res <0) {tcsetattr(fd,TCSANOW,&oldtio); perror(MODEMDEVICE); exit(-1); }
	
	
}
void Rebre(int fd,char *buf){
	
	int i = 0;
	int res = 0;
	int bytes = 0;
	
	ioctl(fd, FIONREAD, &bytes);
	
	/*Llegir el array (buf) i acumular el nombre de bytes (res) fins arribar al caràcter Z */

	do
	
	{
		res = res + read(fd,buf+i,1);
		
		i++;
	
	}while (buf[i-1] != 'Z');
	
		
	
}

